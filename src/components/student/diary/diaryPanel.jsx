import { FiEye, FiPrinter, FiSearch } from "react-icons/fi";
import { GoPlusCircle } from "react-icons/go";
import { RiEyeLine } from "react-icons/ri";
import { useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import ResponNav from "../../../components/responsiveNav";
import Header from "../../../components/header";
import dayjs from "dayjs";
import isoWeek from "dayjs/plugin/isoWeek";
import axiosClient from "../../../service/axiosClient";
import { TbReportMedical } from "react-icons/tb";
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';
import DatePicker from "react-datepicker";
import { FaRegCalendarAlt } from "react-icons/fa";
function DiaryPanel() {
  const MySwal = withReactContent(Swal);
  const navigate = useNavigate();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 1025);
  const [searchTerm, setSearchTerm] = useState("");
  const [diaries, setDiaries] = useState([]);
  const [loading, setLoading] = useState(false)
  const [loadingReport, setLoadingReport] = useState(false)
  let maSV = localStorage.getItem('maSV')
  const [activeTab, setActiveTab] = useState("diary"); // 'diary' ho·∫∑c 'report'
  const [reports, setReports] = useState([]);

  dayjs.extend(isoWeek);
  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 1025);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);



  const handleView = (id) => navigate(`/student/diary/diary-details/${id}`);
  const fetchDiary = () => {
    setLoading(true)
    axiosClient.get(`/nhat-ky/list/${maSV}`, {
      params: { keyword: searchTerm}
    })
      .then((res) => {
        setDiaries(res.data.data);
      })
      .catch((err) => {
        console.error("L·ªói khi t·∫£i nh·∫≠t k√Ω:", err);
      }).finally(() => setLoading(false))
  };


  

  useEffect(() => {
    if (maSV) {
      fetchDiary();
    }
  }, [maSV,searchTerm]); 

  const getStatusStyle = (status) =>
    status === "Ho√†n th√†nh"
      ? "text-green-600 bg-green-100"
      : "text-red-600 bg-red-100";
const handleCreateNextDiary = () => {
  const today = dayjs();
  const currentWeek = today.isoWeek();
  const currentYear = today.year();

  const existingWeek = diaries.find((diary) => {
    const diaryDate = dayjs(diary.ngayTao);
    return (
      diaryDate.isoWeek() === currentWeek &&
      diaryDate.year() === currentYear
    );
  });

  if (existingWeek) {
    Swal.fire({
      icon: "info",
      title: "Th√¥ng b√°o",
      text: "B·∫°n ƒë√£ t·∫°o nh·∫≠t k√Ω cho tu·∫ßn n√†y r·ªìi.",
    });
    return;
  }

  const weekNumbers = diaries.map((item) => {
    const match = item.noiDung.match(/tu·∫ßn (\d+)/i);
    return match ? parseInt(match[1]) : 0;
  });

  const nextWeek = Math.max(...weekNumbers, 0) + 1;

  const newDiary = {
    ngayTao: today.format("YYYY-MM-DD"),
    noiDung: `Nh·∫≠t k√Ω th·ª±c t·∫≠p tu·∫ßn ${nextWeek}`,
    trangThai: "Ch∆∞a xong",
    maSV: localStorage.getItem("maSV"),
  };

  axiosClient.post("/nhat-ky/store", newDiary)
    .then((res) => {
      setDiaries((prev) => [
        ...prev,
        {
          id: nextWeek,
          noiDung: newDiary.noiDung,
          ngayTao: newDiary.ngayTao,
          trangThai: newDiary.trangThai,
        },
      ]);
      Swal.fire({
        icon: "success",
        title: "Th√†nh c√¥ng",
        text: "T·∫°o nh·∫≠t k√Ω th√†nh c√¥ng!",
      });
    })
    .catch((err) => {
      console.error("L·ªói khi t·∫°o nh·∫≠t k√Ω:", err);
      Swal.fire({
        icon: "error",
        title: "L·ªói",
        text: "Kh√¥ng th·ªÉ t·∫°o nh·∫≠t k√Ω. Vui l√≤ng th·ª≠ l·∫°i.",
      });
    });
};



const handleReport = async (maNK) => {
  try {
    const res = await axiosClient.get(`/nhat-ky/${maNK}`);
    const diary = res.data.data;

    const days = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];

    // Nh√≥m c√¥ng vi·ªác theo th·ª©
    const groupedByDay = {};
    diary.chi_tiet_nhat_kies.forEach(task => {
      const day = new Date(task.ngayThucHien).getDay();
      const dayLabel = days[day];

      if (!groupedByDay[dayLabel]) {
        groupedByDay[dayLabel] = [];
      }
      groupedByDay[dayLabel].push(task);
    });

    // T·∫°o HTML b√°o c√°o
    const reportHTML = `
      <h3 style="margin-bottom: 10px;">üìå ${diary.noiDung}</h3>
      <table style="border-collapse: collapse; width: 100%; font-size: 14px;">
        <thead>
          <tr style="background-color: #f0f0f0;">
            <th style="padding: 8px; border: 1px solid #ccc;">Th·ª©</th>
            <th style="padding: 8px; border: 1px solid #ccc;">T√™n C√¥ng Vi·ªác</th>
            <th style="padding: 8px; border: 1px solid #ccc;">K·∫øt Qu·∫£</th>
            <th style="padding: 8px; border: 1px solid #ccc;">Ti·∫øn ƒê·ªô</th>
          </tr>
        </thead>
        <tbody>
          ${
            Object.entries(groupedByDay).map(([dayLabel, tasks]) => {
              return tasks.map((task, idx) => `
                <tr>
                  <td style="padding: 6px; border: 1px solid #ccc;">${idx === 0 ? dayLabel : ""}</td>
                  <td style="padding: 6px; border: 1px solid #ccc;">${task.tenCongViec}</td>
                  <td style="padding: 6px; border: 1px solid #ccc;">${task.ketQua}</td>
                  <td style="padding: 6px; border: 1px solid #ccc;">${task.tienDo}</td>
                </tr>
              `).join('');
            }).join('')
          }
        </tbody>
      </table>
    `;

    // H·ªôp tho·∫°i x√°c nh·∫≠n t·∫°o b√°o c√°o
    const result = await MySwal.fire({
      title: "T·∫°o b√°o c√°o t·ª´ nh·∫≠t k√Ω?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "T·∫°o b√°o c√°o",
      cancelButtonText: "Hu·ª∑",
    });

  if (result.isConfirmed) {
  const confirm = await MySwal.fire({
    title: "üìÑ B√°o c√°o tu·∫ßn",
    html: reportHTML,
    width: "800px",
    confirmButtonText: "N·ªôp b√°o c√°o",
    showCancelButton: true,
    cancelButtonText: "ƒê√≥ng",
    scrollbarPadding: false,
  });

  if (confirm.isConfirmed) {
    // G·ª≠i d·ªØ li·ªáu l√™n API
    await axiosClient.post("/bao-cao", {
      loai: diary.noiDung,
      ngayTao: new Date().toISOString().split("T")[0],
      noiDung: reportHTML, // ho·∫∑c c√≥ th·ªÉ convert sang plain text n·∫øu c·∫ßn
      tepDinhKem: null, // n·∫øu ch∆∞a upload file
      maSV: localStorage.getItem('maSV'), // thay b·∫±ng bi·∫øn th·ª±c t·∫ø
    });

    MySwal.fire("Th√†nh c√¥ng", "ƒê√£ n·ªôp b√°o c√°o!", "success");
  }
}

  } catch (error) {
    console.error(error);
    Swal.fire("L·ªói", "Kh√¥ng th·ªÉ t·∫°o b√°o c√°o", "error");
  }
};

const fetchReports = async () => {
  try {
    setLoadingReport(true)
    const res = await axiosClient.get('/bao-cao-theo-ma', {
      params: { maSV, date: selectedDate}
    });
    setReports(res.data.data || []);
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch b√°o c√°o:", err);
  }finally{
    setLoadingReport(false)
  }
};
const handleViewReport = (report) => {
  // C√≥ th·ªÉ hi·ªÉn th·ªã modal ho·∫∑c chuy·ªÉn trang chi ti·∫øt
  Swal.fire({
    title: report.loai,
    html: report.noiDung,
    width: '60%',
    showCloseButton: true,
  });
};

const handlePrintReport = (report) => {
  const printWindow = window.open('', '_blank');
  printWindow.document.write(`
    <html>
      <head>
        <title>${report.loai}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          table { border-collapse: collapse; width: 100%; }
          td, th { border: 1px solid #ccc; padding: 8px; }
        </style>
      </head>
      <body>
        <h2>${report.loai}</h2>
        <p><strong>Ng√†y t·∫°o:</strong> ${dayjs(report.ngayTao).format("DD/MM/YYYY")}</p>
        ${report.noiDung}
      </body>
    </html>
  `);
  printWindow.document.close();
  printWindow.print();
};

const [selectedDate, setSelectedDate] = useState(null);
useEffect(()=>{
  fetchReports()
},[selectedDate])
  return (
    <>
      {isMobile ? (
        <ResponNav />
      ) : (
        <Header>
          <h2 className="text-xl font-semibold">Nh·∫≠t k√Ω th·ª±c t·∫≠p</h2>
          <p className="text-gray-500">Danh s√°ch nh·∫≠t k√Ω t·ª´ng tu·∫ßn</p>
        </Header>
      )}
<div className="flex gap-2 mt-10 p-2 lg:p-0 lg:mt-5">
  <button
    className={`cursor-pointer px-4 py-2 rounded ${activeTab === "diary" ? "bg-green-600 text-white" : "bg-gray-100 text-gray-600"}`}
    onClick={() => setActiveTab("diary")}
  >
    Nh·∫≠t k√Ω
  </button>
  <button
    className={`cursor-pointer px-4 py-2 rounded ${activeTab === "report" ? "bg-green-600 text-white" : "bg-gray-100 text-gray-600"}`}
    onClick={() => {
      setActiveTab("report");
    }}
  >
    B√°o c√°o ƒë√£ n·ªôp
  </button>
</div>
{activeTab === "diary" ? (

   <div className="p-4 max-w-screen bg-white lg:rounded-md border border-[#ECECEE] mt-3">
        <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between mb-4">
          <div className="relative flex-1">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm"
              className="w-full border border-gray-300 pl-10 pr-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-200 focus:shadow-md"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <FiSearch className="absolute top-1/2 left-3 transform -translate-y-1/2 text-gray-500" />
          </div>
          <button
            onClick={handleCreateNextDiary}
            className="flex items-center gap-2 px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700"
          >
            <GoPlusCircle className="text-lg" />
            T·∫°o Nh·∫≠t K√Ω
          </button>
        </div>

        {loading ? (
        <div className="flex justify-center items-center py-10">
          <div role="status">
            <svg
              aria-hidden="true"
              className="inline w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-green-500"
              viewBox="0 0 100 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor"
              />
              <path
                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                fill="currentFill"
              />
            </svg>
            <span className="sr-only">Loading...</span>
          </div>
        </div>
      ):(<div className="overflow-x-auto">
          <table className="w-full min-w-[600px] text-sm table-auto">
            <thead className="text-left text-gray-500 border-b border-gray-200">
              <tr>
                <th className="py-2">STT</th>
                <th>Ti√™u ƒê·ªÅ</th>
                <th>Ng√†y</th>
                <th>Tr·∫°ng Th√°i</th>
                <th>H√†nh ƒê·ªông</th>
              </tr>
            </thead>
            <tbody>
              {diaries.map((item, index) => (
                <tr key={index} className="border-b border-gray-100">
                  <td className="py-2">{index + 1}</td>
                  <td>{item.noiDung}</td>
                  <td>{dayjs(item.ngayTao).format("DD/MM/YYYY")
}</td>
                  <td>
                    <span
                      className={`px-2 py-1 rounded text-xs font-medium ${getStatusStyle(
                        item.trangThai
                      )}`}
                    >
                      {item.trangThai}
                    </span>
                  </td>
                  <td>
                    <div className="flex gap-1 ml-4">
                      <button
                      title="Xem"
                        onClick={() => handleView(item.maNK)}
                        className="text-xl cursor-pointer flex flex-col justify-center hover:text-black"
                      >
                        <RiEyeLine />
                      </button>
                      <button
                      title="T·∫°o B√°o C√°o"
                        onClick={() => handleReport(item.maNK)}
                        className="text-xl cursor-pointer flex flex-col justify-center hover:text-black"
                      >
                       <TbReportMedical />
                      </button>
                    </div>
                    
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>)}
      </div>
) : (

  <div className="p-4 max-w-screen bg-white lg:rounded-md border border-[#ECECEE] mt-3 overflow-x-auto">
       <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between mb-4">
         
   

<div className="relative w-full max-w-xs">
  <FaRegCalendarAlt className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none" />
  <input
    type="date"
    value={selectedDate}
    onChange={(e) => setSelectedDate(e.target.value)}
    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition duration-200 text-gray-700"
  />
</div>


        </div>
      {loadingReport ? (
        <div className="flex justify-center items-center py-10">
          <div role="status">
            <svg
              aria-hidden="true"
              className="inline w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-green-500"
              viewBox="0 0 100 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor"
              />
              <path
                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                fill="currentFill"
              />
            </svg>
            <span className="sr-only">Loading...</span>
          </div>
        </div>
      ):(<table className="w-full min-w-[600px] text-sm table-auto">
      <thead className="text-left text-gray-500 border-b border-gray-200">
        <tr>
          <th className="py-2">STT</th>
          <th>Lo·∫°i</th>
          <th>Ng√†y T·∫°o</th>
          <th>H√†nh ƒê·ªông</th>
        </tr>
      </thead>
      <tbody>
        {reports.map((item, index) => (
          <tr key={index} className="border-b border-gray-100">
            <td className="py-2">{index + 1}</td>
            <td>{item.loai}</td>
            <td>{dayjs(item.ngayTao).format("DD/MM/YYYY")}</td>
           <td>

<div className="flex gap-4">
  <button
    onClick={() => handleViewReport(item)}
    className="flex items-center gap-1 hover:underline cursor-pointer"
    title="Xem n·ªôi dung"
  >
    <FiEye />
    Xem
  </button>
  <button
    onClick={() => handlePrintReport(item)}
    className="flex items-center gap-1 hover:underline cursor-pointer"
    title="In b√°o c√°o"
  >
    <FiPrinter />
    In
  </button>
</div>
</td>

          </tr>
        ))}
      </tbody>
    </table>)}
  </div>
)}

     
    </>
  );
}

export default DiaryPanel;
